import numpy as np

'''Classes to save into text file ('.psca') and to reload
 sklearn.StandardScaler and sklearn.MinMaxScaler'''

class StandardScaler:
    
    def __init__(self,f):
        f.read(1)
        try:
            self.mean = np.fromstring(f.readline(),sep=' ')
        except ValueError:
            pass #this is fine, meant to work like this. Don't use any files not generated by this code
        f.read(1)
        try:
            self.std = np.fromstring(f.readline(),sep=' ')
        except ValueError:
            pass
    
    def transform(self, arr:np.ndarray)->np.ndarray:
        return (arr-self.mean)/self.std
    
    def inverse_transform(self, arr:np.ndarray)->np.ndarray:
        return arr*self.std+self.mean
    
class MinMaxScaler():
    
    def __init__(self, f):
        f.read(1)
        self.data_min = np.fromstring(f.readline(),sep=' ')
        f.read(1)
        self.data_max = np.fromstring(f.readline(),sep=' ')
        self.min = 0
        self.max = 1
        
    def transform(self,arr:np.ndarray)->np.ndarray:
        X_std = (arr - self.data_min) / (self.data_max - self.data_min);
        return X_std * (self.max - self.min) + self.min;
    
    def inverse_transform(self,arr:np.ndarray)->np.ndarray:
        Y_std = (arr - self.min) / (self.max - self.min);
        return Y_std * (self.data_max - self.data_min) + self.data_min;

def writeStandardScaler(file, std_scaler):
    '''Write sklearn.preprocessing.StandardScaler parameters mean_, scale_ to file'''
    file.write(np.array2string(std_scaler.mean_, precision=17, floatmode='fixed', max_line_width=10000) + '\n')
    file.write(np.array2string(std_scaler.scale_, precision=17, floatmode='fixed', max_line_width=10000) + '\n')
    
def writeMinMaxScaler(file, minmax_scaler):
    '''Write sklearn.preprocessing.StandardScaler parameters data_min_, data_max_, and feature_range to file'''
    file.write(np.array2string(minmax_scaler.data_min_,precision=17, floatmode='fixed', max_line_width=10000) + '\n')
    file.write(np.array2string(minmax_scaler.data_max_,precision=17, floatmode='fixed', max_line_width=10000) + '\n')
    tup = minmax_scaler.get_params().get('feature_range', (0,1))
    file.write(str(tup[0]) + ' ' + str(tup[1]) + '\n')
    
    